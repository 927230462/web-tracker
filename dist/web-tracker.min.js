var webTracker = (function () {
    'use strict';

    function formatTime(time) {
        return `${time}`.split(".")[0]
    }

    function onload(callback) {
        if (document.readyState === 'complete') {
            callback();
        } else {
            window.addEventListener('load', callback);
        }
    }
    const clog = (text) => {
        console.log(`%c ${text}`, 'color:red');
    };

    function merge(obj, target) {
        for (var key in target) {
            obj[key] = target[key];
        }
        return obj
    }

    class SendLog {
        constructor() {
            this.xhr = new XMLHttpRequest();
        }

        init(config) {
            this.appCode = config.appCode;
            this.host = config.host;
            this.version = config.version;
            this.project = config.host;
            this.logstore = config.host;
            this.url = `https://${config.project}.${config.host}/logstores/${config.logstore}/track`;
        }

        _getData(data = {}) {
            let extraData = {
                appCode: this.appCode, //项目代码
                version: this.version,
                pageTitle: document.title,
                pageUrl: location.href,
                timestamp: Date.now(),
                userAgent: navigator.userAgent
            };
            let logs = { ...extraData, ...data };
            for (let key in logs) {
                if (typeof logs[key] === 'number') {
                    logs[key] = "" + logs[key];
                }
            }
            return logs
        }

        _validate(data) {
            if (!data.appCode) {
                clog('请先设置项目代码[appCode]');
                return false
            }
            if (!data.version) {
                clog('请先设置项目版本号[version]');
                return false
            }
            if (!data.logType) {
                clog('请先设置项目类型[logType]');
                return false
            }
            if (!data.logCode) {
                clog('请先设置目标对象代码[logCode]');
                return false
            }
            if (!data.logName) {
                clog('请先设置目标对象名称[logName]');
                return false
            }
            return true
        }

        send(data = {}, callback) {
            this.sendPost(data, callback);
        }

        sendPost(data = {}, callback) {
            let logs = this._getData(data);
            //校验发送的格式是否合格
            if (!this._validate(logs)) {
                return
            }
            let body = JSON.stringify({
                __logs__: [logs]
            });
            this.xhr.open("POST", this.url, true);
            this.xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            this.xhr.setRequestHeader('x-log-apiversion', '0.6.0');
            this.xhr.setRequestHeader('x-log-bodyrawsize', body.length);
            this.xhr.onload = function () {
                if ((this.status >= 200 && this.status <= 300) || this.status == 304) {
                    callback && callback();
                }
            };
            this.xhr.onerror = function (error) {
                console.log('error', error);
            };
            this.xhr.send(body);
        }

        sendGet(data = {}, callback) {
            let logs = this._getData(data);
            //校验发送的格式是否合格
            if (!this._validate(logs)) {
                return
            }
            let str = '';
            Object.keys(logs).forEach(function (key) {
                str += '&' + key + '=' + logs[key];
            });
            let url = `https://${this.project}.${this.host}/logstores/${this.logstore}/track_ua.gif?APIVersion=0.6.0` + str;

            this.xhr.open("GET", url, true);
            this.xhr.onload = function () {
                if ((this.status >= 200 && this.status <= 300) || this.status == 304) {
                    callback && callback();
                }
            };
            this.xhr.onerror = function (error) {
                console.log('error', error);
            };
            this.xhr.send();
        }

        sendImg(data = {}, callback) {
            let logs = this._getData(data);
            //校验发送的格式是否合格
            if (!this._validate(logs)) {
                return
            }
            var str = '';
            Object.keys(logs).forEach(function (key) {
                str += '&' + key + '=' + logs[key];
            });
            var img = document.createElement('img');
            img.setAttribute('class', 'img-responsive');
            img.src = `https://${this.project}.${this.host}/logstores/${this.logstore}/track_ua.gif?APIVersion=0.6.0` + str;
        }

    }

    var log = new SendLog();

    let lastEvent$1;
    ['click', 'pointerdown', 'touchstart', 'mousedown', 'keydown', 'mouseover'].forEach(event => {
        document.addEventListener(event, (event) => {
            lastEvent$1 = event;
        }, {
                capture: true,//capture 控制监听器是在捕获阶段执行还是在冒泡阶段执行 
                passive: true //passive 的意思是顺从的，表示它不会对事件的默认行为说 no
            });
    });

    function getLastEvent() {
        return lastEvent$1;
    }
    const getSelectorDom = function (path) {
        return path.reverse().filter(function (element) {
            return element !== window && element !== document;
        }).map(function (element) {
            var selector;
            if (element.id) {
                selector = `#${element.id}`;
            } else if (element.className && typeof element.className === 'string') {
                selector = '.' + element.className.split(' ').filter(function (item) { return !!item }).join('.');
            } else {
                selector = element.nodeName;
            }
            return selector;
        }).join(' ');
    };

    function getSelector$1(pathsOrTarget) {
        if (Array.isArray(pathsOrTarget)) {
            return getSelectorDom(pathsOrTarget);
        } else {
            var paths = [];
            var element = pathsOrTarget;
            while (element) {
                paths.push(element);
                element = element.parentNode;
            }
            return getSelectorDom(paths);
        }
    }

    function injectJsError() {
        window.addEventListener('error', function (event) {
            debugger
            let lastEvent = getLastEvent();
            if (event.target && (event.target.src || event.target.href)) {
                log.send({
                    logType: 'monitor',
                    logCode: 'RESOURCE_ERROR',
                    logName: '资源加载错误',
                    filename: event.target.src || event.target.href,
                    tagName: event.target.tagName,
                    elementType: getSelector$1(event.path || event.target),
                });
            } else {
                log.send({
                    logType: 'monitor',
                    logCode: 'JS_ERROR',
                    logName: 'JS错误',
                    message: event.message,
                    filename: event.filename,
                    position: (event.lineno || 0) + ":" + (event.colno || 0),
                    stack: event.error.stack,
                    elementType: lastEvent ? getSelector$1(lastEvent.path || lastEvent.target) : ''
                });
            }
        }, true);// true代表在捕获阶段调用,false代表在冒泡阶段捕获,使用true或false都可以

        //当Promise 被 reject 且没有 reject 处理器的时候，会触发 unhandledrejection 事件
        window.addEventListener('unhandledrejection', function (event) {
            let lastEvent = getLastEvent();
            let message = '';
            let line = 0;
            let column = 0;
            let file = '';
            let stack = '';
            if (typeof event.reason === 'string') {
                message = event.reason;
            } else if (typeof event.reason === 'object') {
                message = event.reason.message;
            }
            let reason = event.reason;
            if (typeof reason === 'object') {
                if (reason.stack) {
                    var matchResult = reason.stack.match(/at\s+(.+):(\d+):(\d+)/);
                    if (matchResult) {
                        file = matchResult[1];
                        line = matchResult[2];
                        column = matchResult[3];
                    }
                    stack = reason.stack;
                }
            }
            log.send({
                logType: 'monitor',
                logCode: 'PROMISE_ERROR',
                logName: 'Promise错误',
                elementType: lastEvent ? getSelector$1(lastEvent.path || lastEvent.target) : '',
                message: message,
                filename: file,
                position: line + ':' + column,
                stack,
            });
        }, true);// true代表在捕获阶段调用,false代表在冒泡阶段捕获,使用true或false都可以
    }

    function injectConsoleError() {
        console.error = function (origin) {
            return function (info) {
                if (typeof info === 'string') {
                    log.send({
                        logType: 'monitor',
                        type: 'ERROR',
                        logCode: 'CONSOLE_ERROR',
                        logName: '控制台错误',
                        message: info,
                        elementType: 'page'
                    });
                } else if (typeof info === 'object') {
                    log.send({
                        logType: 'monitor',
                        logCode: 'CONSOLE_ERROR',
                        logName: '控制台错误',
                        message: info.message,
                        stack: info.stack,
                        elementType: 'page'
                    });
                }

                origin.call(console, info);
            };
        }(console.error);
    }

    function getSelector(element) {
        var selector;
        if (element.id) {
            selector = `#${element.id}`;
        } else if (element.className && typeof element.className === 'string') {
            selector = '.' + element.className.split(' ').filter(function (item) { return !!item }).join('.');
        } else {
            selector = element.nodeName.toLowerCase();
        }
        return selector;
    }

    function injectBlankScreen() {
        const wrapperSelectors = ['body', 'html', '#app'];
        let emptyPoints = 0;
        function isWrapper(element) {
            let selector = getSelector(element);
            if (wrapperSelectors.indexOf(selector) >= 0) {
                emptyPoints++;
            }
        }
        onload(function () {
            let xElements, yElements;
            for (let i = 1; i <= 9; i++) {
                xElements = document.elementsFromPoint(window.innerWidth * i / 10, window.innerHeight / 2);
                yElements = document.elementsFromPoint(window.innerWidth / 2, window.innerHeight * i / 10);
                isWrapper(xElements[0]);
                isWrapper(yElements[0]);
            }
            if (emptyPoints >= 0) {
                let centerElements = document.elementsFromPoint(window.innerWidth / 2, window.innerHeight / 2);
                log.send({
                    logType: 'monitor',
                    logCode: 'BLANK_SCREEN',
                    logName: '白屏',
                    emptyPoints: "" + emptyPoints,
                    screen: window.screen.width + "x" + window.screen.height,
                    viewPoint: window.innerWidth + 'x' + window.innerHeight,
                    elementType: getSelector(centerElements[0]),
                });
            }
        });
    }

    function injectPerf() {
        let FMP, LCP;
        new PerformanceObserver((entryList, observer) => {
            let perfEntries = entryList.getEntries();
            FMP = perfEntries[0];
            observer.disconnect();
        }).observe({ entryTypes: ['element'] });

        new PerformanceObserver((entryList, observer) => {
            const perfEntries = entryList.getEntries();
            const lastEntry = perfEntries[perfEntries.length - 1];
            LCP = lastEntry;
            observer.disconnect();
        }).observe({ entryTypes: ['largest-contentful-paint'] });

        new PerformanceObserver(function (entryList, observer) {

            const firstInput = entryList.getEntries()[0];
            if (firstInput) {
                let inputDelay = firstInput.processingStart - firstInput.startTime;//处理延迟
                let duration = firstInput.duration;//处理耗时
                if (firstInput > 0 || duration > 0) {
                    //第一输入延迟（FID）测量用户首次与您的站点交互时的时间 //计算出的延迟时间
                    log.send({
                        logType: 'monitor',
                        logCode: 'PERFORMANCE_FIRST_INPUT_DELAY',
                        logName: '第一输入延迟',
                        elementType: 'page',
                        inputDelay: inputDelay ? formatTime(inputDelay) : 0,
                        duration: duration ? formatTime(duration) : 0,
                        startTime: firstInput.startTime
                    });
                }
            }
            observer.disconnect();
        }).observe({ type: 'first-input', buffered: true });


        onload(function () {
            setTimeout(() => {
                const {
                    fetchStart,
                    connectStart,
                    connectEnd,
                    requestStart,
                    responseStart,
                    responseEnd,
                    domLoading,
                    domInteractive,
                    domContentLoadedEventStart,
                    domContentLoadedEventEnd,
                    loadEventStart } = performance.timing;
                log.send({
                    logType: 'monitor',
                    logCode: 'PERFORMANCE_TMING',
                    logName: '性能计时',
                    elementType: 'page',
                    connectTime: connectEnd - connectStart,//TCP连接耗时
                    ttfbTime: responseStart - requestStart,//ttfb
                    responseTime: responseEnd - responseStart,//Response响应耗时
                    parseDOMTime: loadEventStart - domLoading,//DOM解析渲染耗时
                    domContentLoadedTime: domContentLoadedEventEnd - domContentLoadedEventStart,//DOMContentLoaded事件回调耗时
                    timeToInteractive: domInteractive - fetchStart,//首次可交互时间
                    loadTime: loadEventStart - fetchStart//完整的加载时间
                });
                const FP = performance.getEntriesByName('first-paint')[0];
                const FCP = performance.getEntriesByName('first-contentful-paint')[0];

                log.send({
                    logType: 'monitor',
                    logCode: 'PERFORMANCE_PAINT',
                    logName: '首次绘制',
                    elementType: 'page',
                    firstPaint: FP ? formatTime(FP.startTime) : 0,
                    firstContentPaint: FCP ? formatTime(FCP.startTime) : 0,
                    firstMeaningfulPaint: FMP ? formatTime(FMP.startTime) : 0,
                    largestContentfulPaint: LCP ? formatTime(LCP.renderTime || LCP.loadTime) : 0
                });
            }, 3000);
        });
    }

    function injectLongTask() {
        new PerformanceObserver((list) => {
            list.getEntries().forEach(entry => {
                if (entry.duration > 100) {
                    requestIdleCallback(() => {
                        log.send({
                            logType: 'monitor',
                            logCode: 'LONG_TASK',
                            logName: '卡顿',
                            eventType: lastEvent.type,
                            startTime: formatTime(entry.startTime),// 开始时间
                            duration: formatTime(entry.duration),// 持续时间
                        });
                    });
                }
            });
        }).observe({ entryTypes: ["longtask"] });
    }

    function injectPv() {
        var connection = navigator.connection;
        log.send({
            logType: 'monitor',
            logCode: 'PV',
            logName: 'PV',
            elementType: 'page',
            effectiveType: connection.effectiveType, //网络环境
            rtt: connection.rtt,//往返时间
            screen: `${window.screen.width}x${window.screen.height}`//设备分辨率
        });
        let startTime = Date.now();
        window.addEventListener('unload', () => {
            let stayTime = Date.now() - startTime;
            log.send({
                logType: 'monitor',
                logCode: 'STAY_TIME',
                logName: '在线时长',
                elementType: 'page',
                stayTime
            });
        }, false);

    }

    class WebTracker {
        constructor() {
            this.report = {
                PV: false,
                PERFORMANCE: false,  //性能
                JS_ERROR: true,      //JS
                XHR_ERROR: true,       //接口请求
                CONSOLE_ERROR: false, //针对vue
                TIME_ON_PAGE: false, //在线时长
                LONG_TASK: false,  //卡顿
                BLANK_SCREEN: false //白屏
            };
        }

        install(Vue, options) {
            this.init(options);
            Vue.prototype.$webTracker = this;
        }

        init(options) {
            options = options || {};
            this.report = merge(this.report, options.report || {});
            options.report = this.report;
            this.config = options;
            log.init(this.config);
            this._init();
        }

        send(data) {
            var method = data.method;
            delete data.method;
            switch (method) {
                case 'POST':
                    log.sendPost(data);
                    break;
                case 'GET':
                    log.sendGet(data);
                    break;
                case 'IMG':
                    log.sendImg(data);
                    break;
                default:
                    log.sendPost(data);
                    break;
            }
        }

        _init() {
            //默认监听js错误、资源请求错误、接口请求错误
            injectJsError();
            injectConsoleError();
            this.report && this.report.BLANK_SCREEN && injectBlankScreen();
            this.report && this.report.LONG_TASK && injectLongTask();
            this.report && this.report.PERFORMANCE && injectPerf();
            this.report && this.report.PV && injectPv();
        }
    }

    var index = new WebTracker();

    return index;

}());
